scalar Date
scalar DateTime

directive @authed on FIELD_DEFINITION

enum Permission {
  EDIT_SELF
  EDIT_TEAM
  EDIT_UNIT
}

type Unit {
  _id: ID!

  code: String!
  name: String!

  teams: [String!]!
  members(filter: MemberFilter): [Member!]!
  membersWithAvailabilities(
    filter: MemberFilter,
    start: DateTime!,
    end: DateTime!
  ): [MemberWithAvailabilities!]!
}

type Member {
  _id: ID!
  number: Int!

  firstName: String
  middleName: String
  lastName: String
  fullName: String
  preferredName: String
  mobile: String

  qualifications: [String!]
  rank: String
  units: [UnitMembership!]!
}

type UnitMembership {
  code: String!
  name: String!
  team: String
  roles: [String]!
  permission: Permission
}

input UnitFilter {
  codeAny: [String!]
}

input MemberFilter {
  qualificationsAny: [String!]!
}

enum StormAvailable {
  AVAILABLE
  UNAVAILABLE
}

enum RescueAvailable {
  IMMEDIATE
  SUPPORT
  UNAVAILABLE
}

type AvailabilityInterval {
  _id: ID!

  start: DateTime!
  end: DateTime!

  storm: StormAvailable
  rescue: RescueAvailable
  vehicle: String
  note: String
}

type MemberWithAvailabilities {
  member: Member!
  availabilities: [AvailabilityInterval!]!
  membership: UnitMembership!
}

type DutyOfficer {
  start: DateTime!
  end: DateTime!

  member: Member!
}

type Qualification {
  code: String!
  name: String!
}

type Query {
  unit(code: String!): Unit @authed
  units(filter: UnitFilter): [Unit!]! @authed

  """Gets a member by number"""
  member(number: Int!): Member @authed

  """Gets the current authorised member, or null if not logged in."""
  loggedInMember: Member

  """Gets a list of all available qualifications"""
  qualifications: [Qualification!]!
}

type AuthPayload {
  token: String!
  member: Member!
}

input AvailabilityInput {
  start: DateTime!
  end: DateTime!

  storm: StormAvailable
  rescue: RescueAvailable
  vehicle: String
  note: String
}

type Mutation {
  """Logs in with a member number and password, and returns a token or an error"""
  login(memberNumber: Int!, password: String!): AuthPayload!

  """Updates availabilities for member(s) over an interval"""
  setAvailabilities(
    start: DateTime!,
    end: DateTime!,
    unitCode: String!,
    memberNumber: Int!,
    availabilities: [AvailabilityInput!]!
  ): Boolean @authed

  """Sets the default availability template for a member. This uses a start time, and the data is for a week from then"""
  setDefaultAvailability(
    unitCode: String!,
    memberNumber: Int!,
    start: DateTime!,
    availabilities: [AvailabilityInput!]!
  ) : Boolean @authed

  """Reads and applies the default availability start at @a start, returning the resulting availabilities for that week."""
  applyDefaultAvailability(
    unitCode: String!,
    memberNumber: Int!,
    start: DateTime!
  ): Boolean @authed

  """Sets the duty officer for a date range"""
  setDutyOfficer(unitCode: String!, memberNumber: Int, from: DateTime!, to: DateTime!): Boolean @authed
}
