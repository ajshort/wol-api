scalar Date
scalar DateTime

directive @authed on FIELD_DEFINITION

type Member {
  _id: ID!

  number: Int!
  # permission: Permission

  firstName: String
  middleName: String
  lastName: String
  fullName: String
  preferredName: String
  qualifications: [String!]
  rank: String
  mobile: String
  units: [String!]!

  availabilities(start: DateTime!, end: DateTime!): [AvailabilityInterval!]!

  # callsign: String
  # position: String
  # team: String
  # driverLevel: Int
}

input MemberFilter {
  """A unit to filter teams by"""
  unit: String

  """An optional team name to filter members by"""
  team: String

  """Filters if the member has any of the qualifications"""
  qualificationsAny: [String!]
}

enum Permission {
  EDIT_SELF
  EDIT_TEAM
  EDIT_UNIT
}

enum StormAvailable {
  AVAILABLE
  UNAVAILABLE
}

enum RescueAvailable {
  IMMEDIATE
  SUPPORT
  UNAVAILABLE
}

type AvailabilityInterval {
  _id: ID!
  member: Member!

  start: DateTime!
  end: DateTime!

  storm: StormAvailable
  rescue: RescueAvailable
  vehicle: String
  note: String
}

enum TeamShift {
  DAY
  NIGHT
}

type ShiftTeams {
  day: String!
  night: String!
}

type DutyOfficer {
  shift: TeamShift!
  from: DateTime!
  to: DateTime!
  member: Member!
}

type RescueAvailableCount {
  immediate: Int!
  support: Int!
}

type AvailabilityCount {
  start: DateTime!
  end: DateTime!
  storm: Int!
  vr: RescueAvailableCount!
  frOnWater: RescueAvailableCount!
  frInWater: RescueAvailableCount!
  frOnLand: RescueAvailableCount!
}

type TeamEnteredCount {
  team: String!
  members: Int!
  enteredStorm: Int!
}

type MemberAvailabilitySum {
  member: Member
  storm: Float!
  rescueImmediate: Float!
  rescueSupport: Float!
  rescueUnavailable: Float!
}

type Statistics {
  counts: [AvailabilityCount!]!
  teams: [TeamEnteredCount!]!
  members: [MemberAvailabilitySum!]!
}

type Query {
  """Gets all members with an optional team filter"""
  members(filter: MemberFilter): [Member!]! @authed

  """Gets a member by number"""
  member(number: Int!): Member @authed

  """Gets the current authorised member, or null if not logged in."""
  loggedInMember: Member

  """Gets all members which have some availability (either storm or rescue) at @a instant, defaulting to now"""
  availableAt(instant: DateTime, filter: MemberFilter): [AvailabilityInterval!]! @authed

  """Gets all teams in the unit"""
  teams(unit: String!): [String!]! @authed

  """Gets the current shift teams"""
  shiftTeams(unit: String!): ShiftTeams @authed

  """Gets the scheduled duty officers for a date range"""
  dutyOfficers(from: DateTime, to: DateTime): [DutyOfficer]! @authed

  """Gets the duty officers at `instant`, defaulting to now"""
  dutyOfficersAt(instant: DateTime): [DutyOfficer]! @authed

  """Generates windowed availability stats for a certain period."""
  statistics(start: DateTime!, end: DateTime!, unit: String): Statistics! @authed
}

type AuthPayload {
  token: String!
  member: Member!
}

input AvailabilityInput {
  memberNumber: Int!
  availabilities: [MemberAvailabilityInput!]!
}

input MemberAvailabilityInput {
  start: DateTime!
  end: DateTime!
  storm: StormAvailable
  rescue: RescueAvailable
  vehicle: String
  note: String
}

type Mutation {
  """Logs in with a member number and password, and returns a token or an error"""
  login(memberNumber: Int!, password: String!): AuthPayload!

  """Updates availabilities for member(s) over an interval"""
  setAvailabilities(start: DateTime!, end: DateTime!, availabilities: [AvailabilityInput!]!): [AvailabilityInterval!]! @authed

  """Sets the default availability template for a member. This uses a start time, and the data is for a week from then"""
  setDefaultAvailability(memberNumber: Int!, start: DateTime!, availabilities: [MemberAvailabilityInput!]!) : Boolean @authed

  """Reads and applies the default availability start at @a start, returning the resulting availabilities for that week."""
  applyDefaultAvailability(memberNumber: Int!, start: DateTime!): Boolean @authed

  """Sets the duty officer for a shift and date range"""
  setDutyOfficer(shift: TeamShift!, member: Int, from: DateTime!, to: DateTime!): Boolean @authed
}
